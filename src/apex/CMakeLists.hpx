#  Copyright (c) 2014 University of Oregon
#
#  Distributed under the Boost Software License, Version 1.0. (See accompanying
#  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Create a library called "apex"

list(APPEND CMAKE_MODULE_PATH "${HPX_SOURCE_DIR}/apex/cmake/Modules")
hpx_info("apex" "Will build APEX")

set (APEX_VERSION_MAJOR 0)
set (APEX_VERSION_MINOR 1)

set(APEX_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(APEX_SOURCE_DIR ${APEX_SOURCE_DIR} PARENT_SCOPE)
set(APEX_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(APEX_BINARY_DIR ${APEX_BINARY_DIR} PARENT_SCOPE)

hpx_info("apex" "APEX source dir is ${APEX_SOURCE_DIR}")
hpx_info("apex" "APEX binary dir is ${APEX_BINARY_DIR}")

include_directories(${CMAKE_SOURCE_DIR}/apex/src/apex ${CMAKE_BINARY_DIR} ${APEX_BINARY_DIR} ${CMAKE_SOURCE_DIR}/apex/src/contrib)

add_definitions(-DAPEX_HAVE_HPX)
if(APEX_DEBUG)
    add_definitions(-DAPEX_DEBUG)
endif()

# Check if architecture is x86 or not
message("System architecture: ${CMAKE_SYSTEM_PROCESSOR}")
if(CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
  set(APEX_ARCH_X86 TRUE)
else()
  set(APEX_ARCH_X86 FALSE)
endif()

# If not x86, don't use RDTSC
if(NOT APEX_ARCH_X86)
  add_definitions(-DAPEX_USE_CLOCK_TIMESTAMP=1)
endif()

################################################################################
# Get the GIT version of the code
################################################################################

# Get the current working branch
execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Get the current working tag
execute_process(
  COMMAND git describe --abbrev=0 --tags
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_TAG
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Get the latest abbreviated commit hash of the working branch
execute_process(
  COMMAND git log -1 --format=%h
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_COMMIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

site_name(HOSTNAME)
string(LENGTH ${HOSTNAME} HOSTNAME_LENGTH)
if(${HOSTNAME_LENGTH} GREATER 5)
    string(SUBSTRING ${HOSTNAME} 0 6 HOST_BASENAME)
else()
    set (HOST_BASENAME ${HOSTNAME})
endif()

# this will be statically linked to the core HPX library
add_definitions(-DHPX_EXPORTS)
add_definitions(-DHPX_COROUTINE_EXPORTS)

if(NOT MSVC)
  add_definitions(-fPIC)
else()
  add_definitions(-D_WINDOWS)
  add_definitions(-D_WIN32)
  add_definitions(-D_WIN32_WINNT=0x0601)
  hpx_add_compile_flag(-wd4800)     # forcing value to bool 'true' or 'false' (performance warning)
  hpx_add_compile_flag(-wd4244)     # conversion from '...' to '...', possible loss of data
  hpx_add_compile_flag(-wd4267)     # conversion from '...' to '...', possible loss of data

  # VS2012 and above has a special flag for improving the debug experience by
  # adding more symbol information to the build (-d2Zi+)
  hpx_add_compile_flag(-d2Zi+ CONFIGURATIONS RelWithDebInfo)

  # VS2013 and above know how to do link time constant data segment folding
  # VS2013 update 2 and above know how to remove debug information for
  #     non-referenced functions and data (-Zc:inline)
  if(MSVC12 OR MSVC13)
    hpx_add_compile_flag(-Zc:inline)
    hpx_add_compile_flag(-Gw CONFIGURATIONS Release RelWithDebInfo MinSizeRelease)
    hpx_add_compile_flag(-Zo CONFIGURATIONS RelWithDebInfo)
  endif()

  hpx_add_compile_flag(-bigobj) # Increase the maximum size of object file sections
  hpx_add_compile_flag(-MP)     # Multiprocessor build
endif()

if(EXISTS "/proc/stat" AND NOT APEX_DISABLE_PROC)
    hpx_info("apex" "Building APEX with /proc/stat sampler")
    set(APEX_HAVE_PROC TRUE)
    add_definitions(-DAPEX_HAVE_PROC)
endif()


if("${HOST_BASENAME}" STREQUAL "edison")
    hpx_info("apex" "This is Edison, will build with Cray Power support")
    set(APEX_HAVE_CRAY_POWER TRUE)
    add_definitions(-DAPEX_HAVE_CRAY_POWER)
else()
    hpx_info("apex" "This is not edison")
endif()

if(APEX_HAVE_PROC)
    set(PROC_SOURCE proc_read.cpp)
    set(PROC_HEADER proc_read.h)
endif()

#include(GitExternal)
#git_external(rapidjson
    #https://github.com/miloyip/rapidjson.git
    #master
    #VERBOSE)
#include_directories("${PROJECT_BINARY_DIR}/apex/src/apex/rapidjson/include")
#include_directories("${PROJECT_SOURCE_DIR}/apex/src/apex/rapidjson/include")

git_external(junction
    https://github.com/preshing/junction.git
    master
    VERBOSE)

find_path(
    JUNCTION_INCLUDE_DIR
    NAMES junction
    PATHS ${PROJECT_SOURCE_DIR}/apex/src/apex/junction)

git_external(turf
    https://github.com/preshing/turf.git
    master
    VERBOSE)

find_path(
    TURF_INCLUDE_DIR
    NAMES turf
    PATHS ${PROJECT_SOURCE_DIR}/apex/src/apex/turf)

if(JUNCTION_INCLUDE_DIR AND TURF_INCLUDE_DIR)
    message(INFO " Found junction at ${JUNCTION_INCLUDE_DIR}")
    add_definitions(-DAPEX_HAVE_JUNCTION)
    add_subdirectory(junction)
    include_directories(${JUNCTION_INCLUDE_DIR})
    include_directories(${TURF_INCLUDE_DIR})
    include_directories(${PROJECT_BINARY_DIR}/apex/src/apex/junction/include)
    include_directories(${PROJECT_BINARY_DIR}/apex/src/apex/junction/turf/include)
    #set(LIBS ${LIBS} ${PROJECT_BINARY_DIR}/apex/src/apex/junction/libjunction.so)
    #hpx_libraries(${PROJECT_BINARY_DIR}/apex/src/apex/junction/libjunction.so)
endif()

set(apex_headers
    apex.h
    apex.hpp
    apex_api.hpp
    apex_cxx_shared_lock.hpp
    apex_export.h
    apex_api.hpp
    apex_options.hpp
    apex_policies.hpp
    apex_types.h
    concurrency_handler.hpp
    event_listener.hpp
    handler.hpp
    policy_handler.hpp
    profile.hpp
    profiler.hpp
    profiler_listener.hpp
    semaphore.hpp
    thread_instance.hpp
    task_identifier.hpp
    tau_listener.hpp
    ${PROC_HEADER})
    #apex_config.h

if(APEX_WITH_PAPI)
    find_package(PAPI)
    if(NOT PAPI_FOUND)
        hpx_error("apex" "Requested APEX_WITH_PAPI but could not find PAPI. Please specify PAPI_ROOT.")
    endif()
    hpx_info("apex" "Building APEX with PAPI support.")
    include_directories(${PAPI_INCLUDE_DIR})
    set(LIBS ${LIBS} ${PAPI_LIBRARIES})
    set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${PAPI_LIBRARY_DIR})
    add_definitions(-DAPEX_HAVE_PAPI)
    hpx_libraries(${PAPI_LIBRARIES})
endif()

if(APEX_WITH_ACTIVEHARMONY)
    find_package(ActiveHarmony)
    if(NOT ACTIVEHARMONY_FOUND)
        hpx_error("apex" "Requested APEX_WITH_ACTIVEHARMONY but could not find Active Harmony. Please specify ACTIVEHARMONY_ROOT.")
    endif()
    hpx_info("apex" "Building APEX with Active Harmony support.")
    include_directories(${ACTIVEHARMONY_INCLUDE_DIR})
    set(LIBS ${LIBS} ${ACTIVEHARMONY_LIBRARIES})
    set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${ACTIVEHARMONY_LIBRARY_DIR})
    add_definitions(-DAPEX_HAVE_ACTIVEHARMONY)
    hpx_libraries(${ACTIVEHARMONY_LIBRARIES})
else()
    add_custom_target(project_activeharmony)
endif()

if((DEFINED RCR_ROOT) OR (APEX_WITH_RCR) OR (APEX_BUILD_RCR))
	find_package(RCR)
endif()

if(HAVE_RCR)
	hpx_add_config_define(HPX_HAVE_RCR 1)
else()
   	IF(("${HOST_BASENAME}" STREQUAL "edison") OR ("$ENV{NERSC_HOST}" STREQUAL "edison") OR
      	("${HOST_BASENAME}" STREQUAL "cori") OR ("$ENV{NERSC_HOST}" STREQUAL "cori"))
       	#add_definitions(-fPIC)
       	set (APEX_HAVE_CRAY_POWER TRUE)
       	add_definitions(-DAPEX_HAVE_CRAY_POWER)
       	message(INFO " System has Cray energy monitoring support.")
   	else()
     	if(EXISTS "/sys/class/powercap/intel-rapl/intel-rapl:0")
       	    set (APEX_HAVE_POWERCAP_POWER TRUE)
       	    add_definitions(-DAPEX_HAVE_POWERCAP_POWER)
       	    message(INFO " System has Powercap energy monitoring support.")
     	endif()
   	endif()
endif()

if((DEFINED BFD_ROOT) OR (APEX_WITH_BFD) OR (APEX_BUILD_BFD))
    set(USE_BFD ${APEX_WITH_BFD})
    set(BUILD_BFD ${APEX_BUILD_BFD})
    find_package(BFD)
    if (BFD_FOUND)
        include_directories(${BFD_INCLUDE_DIRS})
        set(LIBS ${LIBS} ${BFD_LIBRARIES})
        set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${BFD_LIBRARY_DIR})
        hpx_libraries(${BFD_LIBRARIES})
        message(INFO " Using binutils: ${BFD_LIBRARY_DIR} ${BFD_LIBRARIES}")
        set(BFD_SOURCE apex_bfd.cpp address_resolution.cpp)
	endif()

	find_package(Demangle)
	if (DEMANGLE_FOUND)
		include_directories(${DEMANGLE_INCLUDE_DIRS})
		set(LIBS ${LIBS} ${DEMANGLE_LIBRARIES})
		set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${DEMANGLE_LIBRARY_DIR})
        hpx_libraries(${DEMANGLE_LIBRARIES})
        message(INFO " Using demangle: ${DEMANGLE_LIBRARY_DIR} ${DEMANGLE_LIBRARIES}")
	else()
  	unset(DEMANGLE_LIBRARY)
  	unset(DEMANGLE_LIBRARIES)
  	unset(DEMANGLE_DIR)
	endif()
	if(NOT APEX_INTEL_MIC)
		find_package(ZLIB)
		if (ZLIB_FOUND)
			set(LIBS ${LIBS} ${ZLIB_LIBRARIES})
			set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${ZLIB_LIBRARY_DIR})
            hpx_libraries(${ZLIB_LIBRARIES})
        	message(INFO " Using zlib: ${ZLIB_LIBRARY_DIR} ${ZLIB_LIBRARIES}")
		endif()
	endif(NOT APEX_INTEL_MIC)
else()
	add_custom_target(project_binutils)
endif()

if(APEX_WITH_MSR)
    find_package(MSR)
    if(NOT MSR_FOUND)
        hpx_error("apex" "Requested APEX_WITH_MSR but could not find MSR. Please specify MSR_ROOT.")
    endif()
    hpx_info("apex" "Building APEX with libmsr support.")
    include_directories(${MSR_INCLUDE_DIR})
    set(LIBS ${LIBS} ${MSR_LIBRARIES})
    set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${MSR_LIBRARY_DIR})
    add_definitions(-DAPEX_HAVE_MSR)
    hpx_libraries(${MSR_LIBRARIES})
endif()

set(apex_sources
    apex.cpp
    apex_options.cpp
    apex_policies.cpp
    concurrency_handler.cpp
    event_listener.cpp
    policy_handler.cpp
    profiler_listener.cpp
    task_identifier.cpp
    tau_listener.cpp
    thread_instance.cpp
    utils.cpp
    ${BFD_SOURCE}
    ${PROC_SOURCE})

if(APEX_WITH_OTF2)
    find_package(OTF2 REQUIRED)
    if (NOT OTF2_FOUND)
        hpx_error("apex" "Requested APEX_WITH_OTF2 but could not find OTF2 library. Please specify OTF2_ROOT.")
    endif()
    include_directories(${OTF2_INCLUDE_DIRS})
    set(LIBS ${LIBS} ${OTF2_LIBRARIES})
    set (CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${OTF2_LIBRARY_DIR})
    set(apex_headers ${apex_headers} otf2_listener.hpp)
    set(apex_sources ${apex_sources} otf2_listener.cpp)
    #add_definitions(-DAPEX_USE_CLOCK_TIMESTAMP=1)
    hpx_libraries(${OTF2_LIBRARIES})
else()
    add_custom_target(project_otf2)
endif()

add_hpx_library(apex
  STATIC NOLIBS
  SOURCES ${apex_sources}
  HEADERS ${apex_headers}
  FOLDER "Core/Dependencies")

add_hpx_pseudo_dependencies (apex_lib project_activeharmony project_binutils project_otf2)
if(JUNCTION_INCLUDE_DIR AND TURF_INCLUDE_DIR)
    add_hpx_pseudo_dependencies (apex_lib junction)
endif()

# add the binary tree to the search path for include files
# so that we will find apex_config.h
if(HAVE_RCR)
include_directories("${PROJECT_BINARY_DIR}/apex/src/apex" ${RCR_INCLUDE_PATH})
else()
include_directories("${PROJECT_BINARY_DIR}/apex/src/apex")
endif()

configure_file (
  "${APEX_SOURCE_DIR}/apex_config.h.in"
  "${APEX_BINARY_DIR}/apex_config.h")

INSTALL(FILES ${apex_headers} DESTINATION include)

set(AMPLIFIER_ROOT ${AMPLIFIER_ROOT} PARENT_SCOPE)
set(APEX_FOUND ON PARENT_SCOPE)
